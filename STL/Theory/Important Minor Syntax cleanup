Spaces in Template Expressions
The requirement to put a space between two closing template expressions has gone:

vector<list<int> >; // OK in each C++ version

vector<list<int>>; // OK since C++11

C++11 lets you use nullptr instead of 0 or NULL to specify that a pointer refers to no value (which
differs from having an undefined value). This new feature especially helps to avoid mistakes that
occurred when a null pointer was interpreted as an integral value. For example:

void f(int);
void f(void*);
f(0); // calls f(int)
f(NULL); // calls f(int) if NULL is 0, ambiguous otherwise
f(nullptr); // calls f(void*)

This nullptr_t is :
std::nullptr_t, defined in <cstddef>  
and this is counted in fundamental data types.
