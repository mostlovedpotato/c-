This question is about finding the median of two arrays when combined so here
we apply the method that we calculate the median of two arrays and then compare and then traverse 
through as per the condition below is the code for that.

#include<iostream>
#include<algorithm>

using namespace std;

int median(int a[],int n) {   //function to calculate the median of a sorted array.
	if (n % 2 == 0) {
		return (a[n / 2] + a[n / 2] - 1) / 2;
	}
	else {
		return a[n / 2];
	}
}

int actMedian(int a1[], int a2[], int n) {
	if (n <= 0) {
		return -1;
	}
	if (n == 1) {
		return (a1[0] + a2[0]) / 2;   // if there is only one elements in two arrays
	}
	if (n == 2) {
		return (max(a1[0], a2[0]) + min(a1[1], a2[1])) / 2;  //if there are only 2 elements in each array
	}
	int m1 = median(a1, n);
	int m2 = median(a2, n);
	if (m1 == m2) {
		return m1;
	}
	if (m1 < m2) {   //if first median is smaller than second then we know that the median actually lies in the second half the first array and
		if (n % 2 == 0) {         // first half of the second array so we will search upon only that much array like binary search
			return actMedian(a1+n/2-1,a2,n-n/2+1);   
		}
		else {
			return actMedian(a1+n/2, a2, n - n / 2);
		}
	}
	else {           //similarly if median 2 is lesser which implies median actully lies in the second half of second array
		if (n % 2 == 0) {   //and first half of first array.
			return actMedian(a2 + n / 2 - 1, a1, n - n / 2 + 1);
		}
		else {
			return actMedian(a2 + n / 2, a1, n - n / 2);
		}
	}
}

int main() {
	int n1, n2;
	cin >> n1;
	n2 = n1;
	int a1[100], a2[100];
	for (int i = 0; i < n1; i++) {
		cin >> a1[i];
	}
	for (int i = 0; i < n2; i++) {
		cin >> a2[i];
	}
	if (n1 == n2)
		cout << "Median is "
		<< actMedian(a1, a2, n1);
	else
		cout << "Doesn't work for arrays "
		<< "of unequal size";

	return 0;
}
