Here in this approach here we go on every time halved toward our goal and interesting thing is solution always will remain at one end of 
the current searching array.
It is not too much different but yeah it is one alternative for the code.
This solution reduces some comparisons.

#include<iostream>

using namespace std;

int binarySearch(int a[],int l,int r, int x) {
	while (r - 1 > 1) {
		int mid = l + (r - 1) / 2;
		if (a[mid] > x) {               ////If element is less than middle we fix right to be there to get into left array
			r = mid;
		}
		else {                             ////If element is greater than middle we fix left to be there to get into right array.
			l = mid;
		}
	}
	if (a[l] == x) {                    ////At last checking at which end our element is stuck now.
		return l;
	}
	if (a[r] == x) {
		return r;
	}
	else {
		return -1;
	}
}

int main() {
	
	int a[1000];
	int n;
	int x;
	cin >> n >> x;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
	int result = binarySearch(a, 0, n - 1, x);
	if (result == -1) {
		cout<<"Element is not present in the array";
	}
	else {
		cout << "Element is present at index" << result;
	}
	return 0;
}
